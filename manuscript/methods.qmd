## Methods

### HG002 and Q100 assembly

-   Genome In A Bottle HG002 RM
-   Q100 assembly
    -   sequencing data used
    -   assembly methods
    -   cuaration
    -   Q100 assembly / genome benchmarking paper.

### DeFrABB

The Snakemake-based DeFrABB pipeline (commit `0.019`;
https://github.com/usnistgov/giab-defrabb) orchestrates four major stages
(Figure 1) [@giabOutline2024; @defrabb2024]:

1. **assembly-based** - variant calling, defining parameters, reference genomes
1. **Variant Proprocessing** – variant format, annotations, filtering
2. **Exclusions** - defining and removing intervals to exclude from benchmark regions
3. **BED/VCF packaging** – produce reference-specific
    `{smvar,stvar}.{benchmark.bed,vcf.gz}` with bgzip + tabix indices.
4. **Evaluations** hap.py and truvari refine, stratifications, target regions, defining truth/ baseline
5. **Report** snakemake for run information, quarto analysis
6. **Provenance capture** – store DAG, Conda `environment.yml`, and resource
    manifest (`analyses_*.tsv`).

-   Q100 specific configuration and methods used for individual steps
    -   dipcall: parameters
    -   vcf processing: formatting, normalization, annotations
    -   exclusions: stratification based, reference-based, assembly-dependent,
        variant overlap
        -   list of excluded regions and reason for exclusion
    -   evaluation

### External callset generation

- variant callset submission methods (supplemental)
-   Benchmarking methods and pipelines used to run comparisons and generate
    variant lists for external evaluations
-   Variant list strata

### Code, analysis, and data

-   Code used
    -   defrabb
    -   external evaluation
    -   publication figures and results
-   data
    -   assembly: Q100
    -   benchmark: ftp
    -   external evaluation: ftp, data.nist.gov